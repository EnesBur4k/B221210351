// <auto-generated />
using System;
using B221210351.EFContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace B221210351.Migrations
{
    [DbContext(typeof(HastaneDbContext))]
    partial class HastaneDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("B221210351.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<int>("ApartmentNo")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int>("NeighbourhoodId")
                        .HasColumnType("int");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NeighbourhoodId");

                    b.HasIndex("StreetId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            ApartmentNo = 1,
                            CityId = 1,
                            DistrictId = 1,
                            NeighbourhoodId = 1,
                            StreetId = 1
                        },
                        new
                        {
                            AddressId = 2,
                            ApartmentNo = 2,
                            CityId = 1,
                            DistrictId = 2,
                            NeighbourhoodId = 2,
                            StreetId = 2
                        },
                        new
                        {
                            AddressId = 3,
                            ApartmentNo = 3,
                            CityId = 1,
                            DistrictId = 3,
                            NeighbourhoodId = 3,
                            StreetId = 3
                        });
                });

            modelBuilder.Entity("B221210351.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("B221210351.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PoliclinicId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PoliclinicId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("B221210351.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PatientBirthDay")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PatientGender")
                        .HasColumnType("bit");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientPersonalId")
                        .HasColumnType("int");

                    b.Property<string>("PatientSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AddressId = 1,
                            ConcurrencyStamp = "725a0033-67af-4788-9711-d3d1c985dc79",
                            Email = "enesburak@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PatientBirthDay = new DateTime(2023, 12, 24, 16, 26, 26, 869, DateTimeKind.Local).AddTicks(7689),
                            PatientGender = true,
                            PatientName = "Enes",
                            PatientPersonalId = 100,
                            PatientSurname = "Burak",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c7e7550-3968-4641-95aa-7c4be8d55e2d",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AddressId = 2,
                            ConcurrencyStamp = "ec534ae5-36cf-43bb-82e2-0e8acfd56766",
                            Email = "ogun@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PatientBirthDay = new DateTime(2023, 12, 24, 16, 26, 26, 869, DateTimeKind.Local).AddTicks(7710),
                            PatientGender = true,
                            PatientName = "Ogün",
                            PatientPersonalId = 101,
                            PatientSurname = "Şanlısoy",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ce0990b-3bd4-41ee-a38d-f4b9b2ce6bd9",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            AddressId = 3,
                            ConcurrencyStamp = "cea305f0-22af-4f48-9d50-156eefbcbfec",
                            Email = "winston@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PatientBirthDay = new DateTime(2023, 12, 24, 16, 26, 26, 869, DateTimeKind.Local).AddTicks(7738),
                            PatientGender = true,
                            PatientName = "Winston",
                            PatientPersonalId = 102,
                            PatientSurname = "Churchill",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b934c5fd-f7f1-4574-91fd-3125f372db74",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            AddressId = 2,
                            ConcurrencyStamp = "571b0a88-6ad3-4aa6-a958-7ee758e1ee0c",
                            Email = "goat@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PatientBirthDay = new DateTime(2023, 12, 24, 16, 26, 26, 869, DateTimeKind.Local).AddTicks(7744),
                            PatientGender = true,
                            PatientName = "Emanuel",
                            PatientPersonalId = 103,
                            PatientSurname = "İcardi",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c8c57a9-7d16-40c9-b754-e262e8da23a7",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            AddressId = 1,
                            ConcurrencyStamp = "4978dd12-5942-4831-9f9e-25eafea92da3",
                            Email = "bulent@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PatientBirthDay = new DateTime(2023, 12, 24, 16, 26, 26, 869, DateTimeKind.Local).AddTicks(7753),
                            PatientGender = true,
                            PatientName = "Bülent",
                            PatientPersonalId = 104,
                            PatientSurname = "Ersoy",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c15939db-abef-4763-b1dd-1ddda936121c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            AddressId = 3,
                            ConcurrencyStamp = "2d586903-686a-4464-8606-2eb80e18b959",
                            Email = "senar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PatientBirthDay = new DateTime(2023, 12, 24, 16, 26, 26, 869, DateTimeKind.Local).AddTicks(7759),
                            PatientGender = true,
                            PatientName = "Muazzez",
                            PatientPersonalId = 105,
                            PatientSurname = "Senar",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7834a612-4f36-4698-8df4-f160c7bdc827",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            AddressId = 2,
                            ConcurrencyStamp = "e77d6cd1-bd2c-437d-a649-a64a939c46ba",
                            Email = "gogh@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PatientBirthDay = new DateTime(2023, 12, 24, 16, 26, 26, 869, DateTimeKind.Local).AddTicks(7764),
                            PatientGender = true,
                            PatientName = "Vincent",
                            PatientPersonalId = 106,
                            PatientSurname = "Van Gogh",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71ceef8e-102a-4ed8-881f-c16b59ba7c65",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            AddressId = 1,
                            ConcurrencyStamp = "a47878ef-fdf4-478c-8650-9a0c940cc473",
                            Email = "heisenberg@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PatientBirthDay = new DateTime(2023, 12, 24, 16, 26, 26, 869, DateTimeKind.Local).AddTicks(7772),
                            PatientGender = true,
                            PatientName = "Werner",
                            PatientPersonalId = 107,
                            PatientSurname = "Heisenberg",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "164421ee-90bb-477f-a248-0d4689ab116e",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("B221210351.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "İstanbul"
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Kocaeli"
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Sakarya"
                        });
                });

            modelBuilder.Entity("B221210351.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "İç Hastalıkları Anabilim Dalı"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "Kardiyoloji Anabilim Dalı"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Göğüs Hastalıkları Anabilim Dalı"
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentName = "Çocuk Sağlığı ve Hastalıkları Anabilim Dalı"
                        },
                        new
                        {
                            DepartmentId = 5,
                            DepartmentName = "Ruh Sağlığı ve Hastalıkları Anabilim Dalı"
                        },
                        new
                        {
                            DepartmentId = 6,
                            DepartmentName = "Nöroloji Anabilim Dalı"
                        },
                        new
                        {
                            DepartmentId = 7,
                            DepartmentName = "Deri ve Zührevi Anabilim Dalı"
                        },
                        new
                        {
                            DepartmentId = 8,
                            DepartmentName = "Genel Cerrahi Anabilim Dalı"
                        });
                });

            modelBuilder.Entity("B221210351.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"), 1L, 1);

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            DistrictId = 1,
                            DistrictName = "Pendik"
                        },
                        new
                        {
                            DistrictId = 2,
                            DistrictName = "Kartal"
                        },
                        new
                        {
                            DistrictId = 3,
                            DistrictName = "Maltepe"
                        });
                });

            modelBuilder.Entity("B221210351.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"), 1L, 1);

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("PoliclinicId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("PoliclinicId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            DoctorName = "Asım",
                            DoctorSurname = "Bar",
                            Gender = true,
                            PoliclinicId = 1
                        },
                        new
                        {
                            DoctorId = 2,
                            DoctorName = "Basım",
                            DoctorSurname = "Bar",
                            Gender = true,
                            PoliclinicId = 2
                        },
                        new
                        {
                            DoctorId = 3,
                            DoctorName = "Casım",
                            DoctorSurname = "Bar",
                            Gender = true,
                            PoliclinicId = 3
                        },
                        new
                        {
                            DoctorId = 4,
                            DoctorName = "Dasım",
                            DoctorSurname = "Bar",
                            Gender = true,
                            PoliclinicId = 4
                        },
                        new
                        {
                            DoctorId = 5,
                            DoctorName = "Esim",
                            DoctorSurname = "Bar",
                            Gender = true,
                            PoliclinicId = 5
                        },
                        new
                        {
                            DoctorId = 6,
                            DoctorName = "Fesim",
                            DoctorSurname = "Bar",
                            Gender = true,
                            PoliclinicId = 6
                        },
                        new
                        {
                            DoctorId = 7,
                            DoctorName = "Kesim",
                            DoctorSurname = "Bar",
                            Gender = true,
                            PoliclinicId = 7
                        },
                        new
                        {
                            DoctorId = 8,
                            DoctorName = "Lesim",
                            DoctorSurname = "Bar",
                            Gender = true,
                            PoliclinicId = 8
                        },
                        new
                        {
                            DoctorId = 9,
                            DoctorName = "Tesim",
                            DoctorSurname = "Bar",
                            Gender = true,
                            PoliclinicId = 9
                        },
                        new
                        {
                            DoctorId = 10,
                            DoctorName = "Resim",
                            DoctorSurname = "Bar",
                            Gender = true,
                            PoliclinicId = 10
                        });
                });

            modelBuilder.Entity("B221210351.Models.Neighbourhood", b =>
                {
                    b.Property<int>("NeighbourhoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NeighbourhoodId"), 1L, 1);

                    b.Property<string>("NeighbourhoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NeighbourhoodId");

                    b.ToTable("Neighbourhoods");

                    b.HasData(
                        new
                        {
                            NeighbourhoodId = 1,
                            NeighbourhoodName = "Güzelyalı"
                        },
                        new
                        {
                            NeighbourhoodId = 2,
                            NeighbourhoodName = "Kaynarca"
                        },
                        new
                        {
                            NeighbourhoodId = 3,
                            NeighbourhoodName = "Çamçeşme"
                        });
                });

            modelBuilder.Entity("B221210351.Models.Policlinic", b =>
                {
                    b.Property<int>("PoliclinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PoliclinicId"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("PoliclinicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PoliclinicId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Policlinics");

                    b.HasData(
                        new
                        {
                            PoliclinicId = 1,
                            DepartmentId = 1,
                            PoliclinicName = "Endokrinoloji ve Metabolizma Kliniği"
                        },
                        new
                        {
                            PoliclinicId = 2,
                            DepartmentId = 1,
                            PoliclinicName = "Gastroenteroloji Kliniği"
                        },
                        new
                        {
                            PoliclinicId = 3,
                            DepartmentId = 2,
                            PoliclinicName = "Kardiyoloji Kliniği"
                        },
                        new
                        {
                            PoliclinicId = 4,
                            DepartmentId = 3,
                            PoliclinicName = "Göğüs Hastalıkları Kliniği"
                        },
                        new
                        {
                            PoliclinicId = 5,
                            DepartmentId = 4,
                            PoliclinicName = "Çocuk Gastroenterolojisi Kliniği"
                        },
                        new
                        {
                            PoliclinicId = 6,
                            DepartmentId = 4,
                            PoliclinicName = "Çocuk Kardiyolojisi Kliniği"
                        },
                        new
                        {
                            PoliclinicId = 7,
                            DepartmentId = 5,
                            PoliclinicName = "Ruh Sağlığı ve Hastalıkları Kliniği"
                        },
                        new
                        {
                            PoliclinicId = 8,
                            DepartmentId = 6,
                            PoliclinicName = "Nöroloji Kliniği"
                        },
                        new
                        {
                            PoliclinicId = 9,
                            DepartmentId = 7,
                            PoliclinicName = "Deri ve Zührevi Hastalıklar Kliniği"
                        },
                        new
                        {
                            PoliclinicId = 10,
                            DepartmentId = 8,
                            PoliclinicName = "Genel Cerrahi Kliniği"
                        });
                });

            modelBuilder.Entity("B221210351.Models.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StreetId"), 1L, 1);

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StreetId");

                    b.ToTable("Street");

                    b.HasData(
                        new
                        {
                            StreetId = 1,
                            StreetName = "Yavuz Selim"
                        },
                        new
                        {
                            StreetId = 2,
                            StreetName = "Teoman"
                        },
                        new
                        {
                            StreetId = 3,
                            StreetName = "Toplum"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("B221210351.Models.Address", b =>
                {
                    b.HasOne("B221210351.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B221210351.Models.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B221210351.Models.Neighbourhood", "Neighbourhood")
                        .WithMany("Addresses")
                        .HasForeignKey("NeighbourhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B221210351.Models.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Neighbourhood");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("B221210351.Models.Appointment", b =>
                {
                    b.HasOne("B221210351.Models.AppUser", "AppUser")
                        .WithMany("Appointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B221210351.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("B221210351.Models.Policlinic", "Policlinic")
                        .WithMany("Appointments")
                        .HasForeignKey("PoliclinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Doctor");

                    b.Navigation("Policlinic");
                });

            modelBuilder.Entity("B221210351.Models.AppUser", b =>
                {
                    b.HasOne("B221210351.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("B221210351.Models.Doctor", b =>
                {
                    b.HasOne("B221210351.Models.Policlinic", "Policlinic")
                        .WithMany("Doctors")
                        .HasForeignKey("PoliclinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policlinic");
                });

            modelBuilder.Entity("B221210351.Models.Policlinic", b =>
                {
                    b.HasOne("B221210351.Models.Department", "Department")
                        .WithMany("Policlinics")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("B221210351.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("B221210351.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B221210351.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("B221210351.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("B221210351.Models.AppUser", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("B221210351.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("B221210351.Models.Department", b =>
                {
                    b.Navigation("Policlinics");
                });

            modelBuilder.Entity("B221210351.Models.District", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("B221210351.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("B221210351.Models.Neighbourhood", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("B221210351.Models.Policlinic", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("B221210351.Models.Street", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
